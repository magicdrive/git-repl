#! /bin/bash

#
# git repl
#
# USAGE:
#     * git-repl                      # Launch git with REPL in current path.
#     *  [-h|--help]                  # Show This help.
#     *  [-i|--init]                  # Initialize current dir as git-repository. then start REPL
#     *  [-v|--verbose]               # REPL start with repository infomation message.
#     *  [-n|--no-help-message]       # Config Start with no help message.
#     *  [-s|--with-status]           # Exec git status command, when pre loop.
#     *  [-f|--completion]            # Specify Completion file.
#
# MIT License
#
# Copyright (c) 2021 Hiroshi IKEGAMI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

__GIT_REPL_PROMPT_ORIG="\[\e[1;36m\]\$ git-repl [\$(__prompt::toplevel)] \[\e[1;35m\]\$(__prompt::branch)\[\e[m\] > \[\e[32m\]git\[\e[m\] "

export GIT_REPL_DEFAULT_PROMPT="${GIT_REPL_DEFAULT_PROMPT:-${__GIT_REPL_PROMPT_ORIG}}"
export GIT_REPL_DEFAULT_COMPLETION_FILE="${GIT_REPL_DEFAULT_COMPLETION_FILE:-""}"
export GIT_REPL_LS_CMD="${GIT_REPL_LS_CMD:-""}"
export GIT_REPL_CAT_CMD="${GIT_REPL_CAT_CMD:-""}"
export GIT_REPL_START_WITH_INFO=${GIT_REPL_START_WITH_INFO:-"0"}
export GIT_REPL_WITH_STATUS=${GIT_REPL_WITH_STATUS:-"0"}
export GIT_REPL_START_WITH_HELP_MESSAGE=${GIT_REPL_START_WITH_HELP_MESSAGE:-"1"}

__prompt::dirty() {
    git rev-parse 2> /dev/null && [ "$(git status --short 2>/dev/null)" = "" ] || echo "*"
}

__prompt::branch() {
    git rev-parse 2> /dev/null && echo "($(git rev-parse --abbrev-ref HEAD 2> /dev/null)$(__prompt::dirty))"
}

__prompt::toplevel() {
    basename $(git rev-parse --show-toplevel)
}

git::repl::version() {
    echo "v1.0.0"
}

git::repl::help() {
    cat << HELP
USAGE:
    * git-repl                      # Launch git with REPL in current path.
    *  [-h|--help]                  # Show This help.
    *  [-i|--init]                  # Initialize current dir as git-repository. then start REPL
    *  [-v|--verbose]               # Start REPL with repository infomation message.
    *  [-n|--no-help-message]       # Config Start with no help message.
    *  [-s|--with-status]           # Exec git status command, when pre loop.
    *  [-f|--completion]            # Specify Completion file.
HELP
    exit 1
}

git::repl::setup() {

    if [ "$(uname)" = 'Darwin' ];then
        if [ -f "$HOME/local/bin/ls" ];then
            lscmd="ls --color=auto"
        elif [ -f /usr/local/bin/gls ];then
            lscmd="gls --color=auto"
        else
            lscmd="ls -G"
        fi
    else
        lscmd="ls --color=auto"
    fi

    if [ -f "$(which bat)" ];then
        catcmd="bat";
    else
        catcmd="cat";
    fi

    if [ -f "$HOME/local/bin/exa" ];then
        lscmd="exa --color=auto"
    fi

    if [ -x "$(which ${GIT_REPL_LS_CMD})" ];then
        lscmd="${GIT_REPL_LS_CMD}"
    fi

    if [ -x "$(which ${GIT_REPL_CAT_CMD})" ];then
        catcmd="${GIT_REPL_CAT_CMD}"
    fi
}

git::repl::message::start() {
    echo -e "\033[1;33m-- start git-repl $(git::repl::version)--\033[m"
    local logo=$(cat << 'EOS'
          _ __                        __
   ____ _(_) /_      ________  ____  / /
  / __ `/ / __/_____/ ___/ _ \/ __ \/ /
 / /_/ / / /_/_____/ /  /  __/ /_/ / /
 \__, /_/\__/     /_/   \___/ .___/_/
/____/                     /_/
EOS
)
    echo -e "\033[1;33m${logo}"
    echo
    echo
}

git::repl::message::bind_command() {
    echo -e "\033[1;37;42m* repl config:\033[m"
    echo "alias ls=\`${lscmd}\`"
    echo "alias cat=\`${catcmd}\`"
    echo
    echo -e "\033[1;37;42m* repl special command:\033[m"
    echo "help!       -> Show this message."
    echo "info!       -> Show git infomation."
    echo "exit        -> Exit git-repl."
    echo "![command]  -> Run as normal command."
    echo
}

git::repl::info() {
    echo -e "\033[1;37;42m* remote:\033[m"
    git remote -v
    echo

    echo -e "\033[1;37;42m* git/config:\033[m"
    if [[ ${catcmd} = "bat" ]];then
        bat --plain --paging=never "$(git rev-parse --show-toplevel)/.git/config"
    else
        cat "$(git rev-parse --show-toplevel)/.git/config"
    fi
    echo

    echo -e "\033[1;37;42m* pwd:\033[m"
    pwd
    echo

    echo -e "\033[1;37;42m* lscmd -a:\033[m"
    ${lscmd} -a
    echo

}

git::repl::exit() {
    echo
    echo "git-repl end..."
    echo "bye."
    exit 0
}

git::repl::do_git_init() {
    git rev-parse 2>/dev/null || git init
}

git::repl::config::completion() {
    local completion_file="$1"
    if [[ -e ${completion_file} ]];then
        GIT_REPL_DEFAULT_COMPLETION_FILE="$1"
    fi
}

git::repl::main() {
    git::repl::setup
    git::repl::message::start
    if [ "${GIT_REPL_START_WITH_HELP_MESSAGE}" = "1" ];then
        git::repl::message::bind_command
    fi
    if [ "${GIT_REPL_START_WITH_INFO}" = "1" ];then
        git::repl::info
    fi

    while true; do
        echo -ne "${GIT_REPL_DEFAULT_PROMPT@P}"
        read subcommand

        case "${subcommand}" in
            "ls")
                ${lscmd}
                ;;
            "exit")
                git::repl::exit
                ;;
            *)
                if [[ ${subcommand} =~ ^!(.*)$ ]]; then
                    ${BASH_REMATCH[1]}
                elif [[ ${subcommand} =~ ^git[:blank:]*.*$ ]]; then
                    ${subcommand}
                elif [[ ${subcommand} =~ ^[:blank:]*info![:blank:]*$ ]]; then
                    git::repl::info
                elif [[ ${subcommand} =~ ^ls[:blank:]*(.*)$ ]]; then
                    ${lscmd} ${BASH_REMATCH[1]}
                elif [[ ${subcommand} =~ ^[:blank:]*help![:blank:]*$ ]]; then
                    git::repl::message::bind_command
                elif [[ ${subcommand} =~ ^cat[:blank:]*(.*)$ ]]; then
                    ${catcmd} ${BASH_REMATCH[1]}
                elif [[ -z ${subcommand} ]];then
                    # do nothing.
                    :
                else
                    git ${subcommand}
                fi
                ;;
        esac

        if [ "${GIT_REPL_WITH_STATUS}" = "1" ];then
            git status -sb
        fi

    done
}

git::repl::mode::no_help_message() {
    GIT_REPL_START_WITH_HELP_MESSAGE=0
}

git::repl::mode::verbose() {
    GIT_REPL_START_WITH_INFO=1
}

git::repl::mode::with_status() {
    GIT_REPL_WITH_STATUS=1
}

if [ "$1" != "--no-rlwrap" ];then
    _RLWRAP_OPT="--remember"
    if [[ -f ${GIT_REPL_DEFAULT_COMPLETION_FILE} ]];then
        OPT="$_RLWRAP_OPT --file "${GIT_REPL_DEFAULT_COMPLETION_FILE}""
    fi
    exec rlwrap $_RLWRAP_OPT $0 --no-rlwrap $@ && exit 0;
fi

optspec=":-:c:hvsin"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    git::repl::help; exit 1
                    ;;
                no-help-message)
                    git::repl::mode::no_help_message
                    ;;
                init)
                    git::repl::do_git_init
                    ;;
                completion)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    git::repl::config::completion "${val}"
                    ;;
                verbose)
                    git::repl::mode::verbose
                    ;;
                with-status)
                    git::repl::mode::with_status
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        h)
            git::repl::help; exit 1
            ;;
        i)
            git::repl::do_git_init
            ;;
        n)
            git::repl::mode::no_help_message
            ;;
        c)
            git::repl::config::completion "${OPTARG}"
            ;;
        v)
            git::repl::mode::verbose
            ;;
        s)
            git::repl::mode::with_status
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

#
# check git repository
#
git rev-parse || git::repl::exit


trap git::repl::exit HUP INT QUIT TERM

git::repl::main && exit 0;
