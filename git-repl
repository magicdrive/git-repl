#! /bin/bash

#
# git repl
#
# USAGE:
#     * git-repl                      # Launch git with REPL in current path.
#     *  [-v|--verbose]               # REPL verbose mode.
#     *  [-h|--help]                  # Show This help.
#
# MIT License
#
# Copyright (c) 2021 Hiroshi IKEGAMI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__GIT_REPL_PROMPT_ORIG="\[\e[1;34m\]\$ git [\$(basename \$(git rev-parse --show-toplevel))] \$(git::repl::prompt::branch) > \[\e[m\]"
export GIT_REPL_DEFAULT_PROMPT="${GIT_REPL_DEFAULT_PROMPT:-${__GIT_REPL_PROMPT_ORIG}}"
export GIT_REPL_LS_CMD="${GIT_REPL_LS_CMD}"
export GIT_REPL_CAT_CMD="${GIT_REPL_CAT_CMD}"


git::repl::prompt::dirty() {
    git rev-parse 2> /dev/null && [ "$(git status --short 2>/dev/null)" = "" ] || echo "*"
}

git::repl::prompt::branch() {
    git rev-parse 2> /dev/null && echo "($(git rev-parse --abbrev-ref HEAD 2> /dev/null)$(git::repl::prompt::dirty))"
}

git::repl::help() {
    cat << HELP
USAGE:
    * git-repl                      # Launch git with REPL in current path.
    *  [-v|--verbose]               # REPL verbose mode.
    *  [-h|--help]                  # Show This help.
HELP
    exit 1
}

git::repl::setup() {

    if [ "$(uname)" = 'Darwin' ];then
        if [ -f "$HOME/local/bin/ls" ];then
            lscmd="ls --color=auto"
        elif [ -f /usr/local/bin/gls ];then
            lscmd="gls --color=auto"
        else
            lscmd="ls -G"
        fi
    else
        lscmd="ls --color=auto"
    fi

    if [ -f "$(which bat)" ];then
        catcmd="bat";
    else
        catcmd="cat";
    fi

    if [ -f "$HOME/local/bin/exa" ];then
        lscmd="exa --color=auto"
    fi

    if [ -x "$(which ${GIT_REPL_LS_CMD})" ];then
        lscmd="${GIT_REPL_LS_CMD}"
    fi

    if [ -x "$(which ${GIT_REPL_CAT_CMD})" ];then
        catcmd="${GIT_REPL_CAT_CMD}"
    fi
}


git::repl::main() {
    git::repl::setup
    while true; do
        if [ "${__GIT_REPL_VERBOSE}" = 1 ];then
            git status -sb
            pwd
        fi
        echo -ne "${GIT_REPL_DEFAULT_PROMPT@P}"
        read subcommand

        cmd="git ${subcommand}"

        case "${subcommand}" in
            "ls")
                if [ "${__GIT_REPL_VERBOSE}" = 1 ];then
                    pwd
                fi
                ${lscmd}
                ;;
            "exit")
                echo "bye."
                exit 0
                ;;
            *)
                if [[ ${subcommand} =~ ^!(.*)$ ]]; then
                    ${BASH_REMATCH[1]}
                elif [[ ${subcommand} =~ ^git[:blank:]*.*$ ]]; then
                    ${subcommand}
                elif [[ ${subcommand} =~ ^ls[:blank:]*(.*)$ ]]; then
                    ${lscmd} ${BASH_REMATCH[1]}
                elif [[ ${subcommand} =~ ^cat[:blank:]*(.*)$ ]]; then
                    ${catcmd} ${BASH_REMATCH[1]}
                else
                    ${cmd};
                fi
                ;;
        esac

    done
}

git::repl::mode::verbose() {
    __GIT_REPL_VERBOSE=1
    git::repl::main
}


if [ "$1" != "--no-rlwrap" ];then
    exec rlwrap $0 --no-rlwrap $@ && exit 0;
fi

optspec=":-:hcv"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    git::repl::help; exit 1
                    ;;
                verbose)
                    git::repl::mode::verbose
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        h)
            git::repl::help; exit 1
            ;;
        v)
            git::repl::mode::verbose
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done


git::repl::main && exit 0;

